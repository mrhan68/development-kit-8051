                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _keyscan
                                     13 	.globl _strlen
                                     14 	.globl _TF2
                                     15 	.globl _EXF2
                                     16 	.globl _RCLK
                                     17 	.globl _TCLK
                                     18 	.globl _EXEN2
                                     19 	.globl _TR2
                                     20 	.globl _C_T2
                                     21 	.globl _CP_RL2
                                     22 	.globl _T2CON_7
                                     23 	.globl _T2CON_6
                                     24 	.globl _T2CON_5
                                     25 	.globl _T2CON_4
                                     26 	.globl _T2CON_3
                                     27 	.globl _T2CON_2
                                     28 	.globl _T2CON_1
                                     29 	.globl _T2CON_0
                                     30 	.globl _PT2
                                     31 	.globl _ET2
                                     32 	.globl _CY
                                     33 	.globl _AC
                                     34 	.globl _F0
                                     35 	.globl _RS1
                                     36 	.globl _RS0
                                     37 	.globl _OV
                                     38 	.globl _F1
                                     39 	.globl _P
                                     40 	.globl _PS
                                     41 	.globl _PT1
                                     42 	.globl _PX1
                                     43 	.globl _PT0
                                     44 	.globl _PX0
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _EA
                                     62 	.globl _ES
                                     63 	.globl _ET1
                                     64 	.globl _EX1
                                     65 	.globl _ET0
                                     66 	.globl _EX0
                                     67 	.globl _P2_7
                                     68 	.globl _P2_6
                                     69 	.globl _P2_5
                                     70 	.globl _P2_4
                                     71 	.globl _P2_3
                                     72 	.globl _P2_2
                                     73 	.globl _P2_1
                                     74 	.globl _P2_0
                                     75 	.globl _SM0
                                     76 	.globl _SM1
                                     77 	.globl _SM2
                                     78 	.globl _REN
                                     79 	.globl _TB8
                                     80 	.globl _RB8
                                     81 	.globl _TI
                                     82 	.globl _RI
                                     83 	.globl _P1_7
                                     84 	.globl _P1_6
                                     85 	.globl _P1_5
                                     86 	.globl _P1_4
                                     87 	.globl _P1_3
                                     88 	.globl _P1_2
                                     89 	.globl _P1_1
                                     90 	.globl _P1_0
                                     91 	.globl _TF1
                                     92 	.globl _TR1
                                     93 	.globl _TF0
                                     94 	.globl _TR0
                                     95 	.globl _IE1
                                     96 	.globl _IT1
                                     97 	.globl _IE0
                                     98 	.globl _IT0
                                     99 	.globl _P0_7
                                    100 	.globl _P0_6
                                    101 	.globl _P0_5
                                    102 	.globl _P0_4
                                    103 	.globl _P0_3
                                    104 	.globl _P0_2
                                    105 	.globl _P0_1
                                    106 	.globl _P0_0
                                    107 	.globl _TH2
                                    108 	.globl _TL2
                                    109 	.globl _RCAP2H
                                    110 	.globl _RCAP2L
                                    111 	.globl _T2CON
                                    112 	.globl _B
                                    113 	.globl _ACC
                                    114 	.globl _PSW
                                    115 	.globl _IP
                                    116 	.globl _P3
                                    117 	.globl _IE
                                    118 	.globl _P2
                                    119 	.globl _SBUF
                                    120 	.globl _SCON
                                    121 	.globl _P1
                                    122 	.globl _TH1
                                    123 	.globl _TH0
                                    124 	.globl _TL1
                                    125 	.globl _TL0
                                    126 	.globl _TMOD
                                    127 	.globl _TCON
                                    128 	.globl _PCON
                                    129 	.globl _DPH
                                    130 	.globl _DPL
                                    131 	.globl _SP
                                    132 	.globl _P0
                                    133 	.globl _key
                                    134 	.globl _keypressed
                                    135 	.globl _num_to_hex
                                    136 	.globl _num
                                    137 	.globl _LCD_GotoXY_PARM_2
                                    138 	.globl _LCD_Send_Command
                                    139 	.globl _Wait_For_LCD
                                    140 	.globl _LCD_init
                                    141 	.globl _LCD_Write_One_Char
                                    142 	.globl _LCD_Write_String
                                    143 	.globl _LCD_GotoXY
                                    144 	.globl _Delay_ms
                                    145 	.globl _Delay_us
                                    146 ;--------------------------------------------------------
                                    147 ; special function registers
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0	=	0x0080
                           000081   152 _SP	=	0x0081
                           000082   153 _DPL	=	0x0082
                           000083   154 _DPH	=	0x0083
                           000087   155 _PCON	=	0x0087
                           000088   156 _TCON	=	0x0088
                           000089   157 _TMOD	=	0x0089
                           00008A   158 _TL0	=	0x008a
                           00008B   159 _TL1	=	0x008b
                           00008C   160 _TH0	=	0x008c
                           00008D   161 _TH1	=	0x008d
                           000090   162 _P1	=	0x0090
                           000098   163 _SCON	=	0x0098
                           000099   164 _SBUF	=	0x0099
                           0000A0   165 _P2	=	0x00a0
                           0000A8   166 _IE	=	0x00a8
                           0000B0   167 _P3	=	0x00b0
                           0000B8   168 _IP	=	0x00b8
                           0000D0   169 _PSW	=	0x00d0
                           0000E0   170 _ACC	=	0x00e0
                           0000F0   171 _B	=	0x00f0
                           0000C8   172 _T2CON	=	0x00c8
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                                    177 ;--------------------------------------------------------
                                    178 ; special function bits
                                    179 ;--------------------------------------------------------
                                    180 	.area RSEG    (ABS,DATA)
      000000                        181 	.org 0x0000
                           000080   182 _P0_0	=	0x0080
                           000081   183 _P0_1	=	0x0081
                           000082   184 _P0_2	=	0x0082
                           000083   185 _P0_3	=	0x0083
                           000084   186 _P0_4	=	0x0084
                           000085   187 _P0_5	=	0x0085
                           000086   188 _P0_6	=	0x0086
                           000087   189 _P0_7	=	0x0087
                           000088   190 _IT0	=	0x0088
                           000089   191 _IE0	=	0x0089
                           00008A   192 _IT1	=	0x008a
                           00008B   193 _IE1	=	0x008b
                           00008C   194 _TR0	=	0x008c
                           00008D   195 _TF0	=	0x008d
                           00008E   196 _TR1	=	0x008e
                           00008F   197 _TF1	=	0x008f
                           000090   198 _P1_0	=	0x0090
                           000091   199 _P1_1	=	0x0091
                           000092   200 _P1_2	=	0x0092
                           000093   201 _P1_3	=	0x0093
                           000094   202 _P1_4	=	0x0094
                           000095   203 _P1_5	=	0x0095
                           000096   204 _P1_6	=	0x0096
                           000097   205 _P1_7	=	0x0097
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AF   227 _EA	=	0x00af
                           0000B0   228 _P3_0	=	0x00b0
                           0000B1   229 _P3_1	=	0x00b1
                           0000B2   230 _P3_2	=	0x00b2
                           0000B3   231 _P3_3	=	0x00b3
                           0000B4   232 _P3_4	=	0x00b4
                           0000B5   233 _P3_5	=	0x00b5
                           0000B6   234 _P3_6	=	0x00b6
                           0000B7   235 _P3_7	=	0x00b7
                           0000B0   236 _RXD	=	0x00b0
                           0000B1   237 _TXD	=	0x00b1
                           0000B2   238 _INT0	=	0x00b2
                           0000B3   239 _INT1	=	0x00b3
                           0000B4   240 _T0	=	0x00b4
                           0000B5   241 _T1	=	0x00b5
                           0000B6   242 _WR	=	0x00b6
                           0000B7   243 _RD	=	0x00b7
                           0000B8   244 _PX0	=	0x00b8
                           0000B9   245 _PT0	=	0x00b9
                           0000BA   246 _PX1	=	0x00ba
                           0000BB   247 _PT1	=	0x00bb
                           0000BC   248 _PS	=	0x00bc
                           0000D0   249 _P	=	0x00d0
                           0000D1   250 _F1	=	0x00d1
                           0000D2   251 _OV	=	0x00d2
                           0000D3   252 _RS0	=	0x00d3
                           0000D4   253 _RS1	=	0x00d4
                           0000D5   254 _F0	=	0x00d5
                           0000D6   255 _AC	=	0x00d6
                           0000D7   256 _CY	=	0x00d7
                           0000AD   257 _ET2	=	0x00ad
                           0000BD   258 _PT2	=	0x00bd
                           0000C8   259 _T2CON_0	=	0x00c8
                           0000C9   260 _T2CON_1	=	0x00c9
                           0000CA   261 _T2CON_2	=	0x00ca
                           0000CB   262 _T2CON_3	=	0x00cb
                           0000CC   263 _T2CON_4	=	0x00cc
                           0000CD   264 _T2CON_5	=	0x00cd
                           0000CE   265 _T2CON_6	=	0x00ce
                           0000CF   266 _T2CON_7	=	0x00cf
                           0000C8   267 _CP_RL2	=	0x00c8
                           0000C9   268 _C_T2	=	0x00c9
                           0000CA   269 _TR2	=	0x00ca
                           0000CB   270 _EXEN2	=	0x00cb
                           0000CC   271 _TCLK	=	0x00cc
                           0000CD   272 _RCLK	=	0x00cd
                           0000CE   273 _EXF2	=	0x00ce
                           0000CF   274 _TF2	=	0x00cf
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 ;--------------------------------------------------------
                                    281 ; internal ram data
                                    282 ;--------------------------------------------------------
                                    283 	.area DSEG    (DATA)
      000000                        284 _LCD_GotoXY_PARM_2:
      000000                        285 	.ds 1
      000001                        286 _num::
      000001                        287 	.ds 2
      000003                        288 _num_to_hex::
      000003                        289 	.ds 17
      000014                        290 _keypressed::
      000014                        291 	.ds 2
      000016                        292 _key::
      000016                        293 	.ds 1
                                    294 ;--------------------------------------------------------
                                    295 ; overlayable items in internal ram
                                    296 ;--------------------------------------------------------
                                    297 	.area	OSEG    (OVR,DATA)
                                    298 	.area	OSEG    (OVR,DATA)
                                    299 ;--------------------------------------------------------
                                    300 ; Stack segment in internal ram
                                    301 ;--------------------------------------------------------
                                    302 	.area	SSEG
      000000                        303 __start__stack:
      000000                        304 	.ds	1
                                    305 
                                    306 ;--------------------------------------------------------
                                    307 ; indirectly addressable internal ram data
                                    308 ;--------------------------------------------------------
                                    309 	.area ISEG    (DATA)
                                    310 ;--------------------------------------------------------
                                    311 ; absolute internal ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area IABS    (ABS,DATA)
                                    314 	.area IABS    (ABS,DATA)
                                    315 ;--------------------------------------------------------
                                    316 ; bit data
                                    317 ;--------------------------------------------------------
                                    318 	.area BSEG    (BIT)
                                    319 ;--------------------------------------------------------
                                    320 ; paged external ram data
                                    321 ;--------------------------------------------------------
                                    322 	.area PSEG    (PAG,XDATA)
                                    323 ;--------------------------------------------------------
                                    324 ; external ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area XSEG    (XDATA)
                                    327 ;--------------------------------------------------------
                                    328 ; absolute external ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area XABS    (ABS,XDATA)
                                    331 ;--------------------------------------------------------
                                    332 ; external initialized ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XISEG   (XDATA)
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
                                    351 ;--------------------------------------------------------
                                    352 ; global & static initialisations
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
                                    355 	.area GSINIT  (CODE)
                                    356 	.area GSFINAL (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.globl __sdcc_gsinit_startup
                                    359 	.globl __sdcc_program_startup
                                    360 	.globl __start__stack
                                    361 	.globl __mcs51_genXINIT
                                    362 	.globl __mcs51_genXRAMCLEAR
                                    363 	.globl __mcs51_genRAMCLEAR
                                    364 ;	main.c:5: unsigned char num_to_hex[17]="0123456789ABCDEF";
      000000 75*03 30         [24]  365 	mov	_num_to_hex,#0x30
      000003 75*04 31         [24]  366 	mov	(_num_to_hex + 0x0001),#0x31
      000006 75*05 32         [24]  367 	mov	(_num_to_hex + 0x0002),#0x32
      000009 75*06 33         [24]  368 	mov	(_num_to_hex + 0x0003),#0x33
      00000C 75*07 34         [24]  369 	mov	(_num_to_hex + 0x0004),#0x34
      00000F 75*08 35         [24]  370 	mov	(_num_to_hex + 0x0005),#0x35
      000012 75*09 36         [24]  371 	mov	(_num_to_hex + 0x0006),#0x36
      000015 75*0A 37         [24]  372 	mov	(_num_to_hex + 0x0007),#0x37
      000018 75*0B 38         [24]  373 	mov	(_num_to_hex + 0x0008),#0x38
      00001B 75*0C 39         [24]  374 	mov	(_num_to_hex + 0x0009),#0x39
      00001E 75*0D 41         [24]  375 	mov	(_num_to_hex + 0x000a),#0x41
      000021 75*0E 42         [24]  376 	mov	(_num_to_hex + 0x000b),#0x42
      000024 75*0F 43         [24]  377 	mov	(_num_to_hex + 0x000c),#0x43
      000027 75*10 44         [24]  378 	mov	(_num_to_hex + 0x000d),#0x44
      00002A 75*11 45         [24]  379 	mov	(_num_to_hex + 0x000e),#0x45
      00002D 75*12 46         [24]  380 	mov	(_num_to_hex + 0x000f),#0x46
      000030 75*13 00         [24]  381 	mov	(_num_to_hex + 0x0010),#0x00
                                    382 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  383 	ljmp	__sdcc_program_startup
                                    384 ;--------------------------------------------------------
                                    385 ; Home
                                    386 ;--------------------------------------------------------
                                    387 	.area HOME    (CODE)
                                    388 	.area HOME    (CODE)
      000003                        389 __sdcc_program_startup:
      000003 02r02rAC         [24]  390 	ljmp	_main
                                    391 ;	return from main will return to caller
                                    392 ;--------------------------------------------------------
                                    393 ; code
                                    394 ;--------------------------------------------------------
                                    395 	.area CSEG    (CODE)
                                    396 ;------------------------------------------------------------
                                    397 ;Allocation info for local variables in function 'LCD_Send_Command'
                                    398 ;------------------------------------------------------------
                                    399 ;x                         Allocated to registers 
                                    400 ;------------------------------------------------------------
                                    401 ;	lcd1602.c:6: void LCD_Send_Command(unsigned char x)
                                    402 ;	-----------------------------------------
                                    403 ;	 function LCD_Send_Command
                                    404 ;	-----------------------------------------
      000000                        405 _LCD_Send_Command:
                           000007   406 	ar7 = 0x07
                           000006   407 	ar6 = 0x06
                           000005   408 	ar5 = 0x05
                           000004   409 	ar4 = 0x04
                           000003   410 	ar3 = 0x03
                           000002   411 	ar2 = 0x02
                           000001   412 	ar1 = 0x01
                           000000   413 	ar0 = 0x00
      000000 85 82 80         [24]  414 	mov	_P0,dpl
                                    415 ;	lcd1602.c:9: LCD_RS=0; //Chon thanh ghi lenh
                                    416 ;	assignBit
      000003 C2 A6            [12]  417 	clr	_P2_6
                                    418 ;	lcd1602.c:10: LCD_RW=0; //De ghi du lieu
                                    419 ;	assignBit
      000005 C2 A5            [12]  420 	clr	_P2_5
                                    421 ;	lcd1602.c:11: LCD_EN=1;
                                    422 ;	assignBit
      000007 D2 A7            [12]  423 	setb	_P2_7
                                    424 ;	lcd1602.c:12: Delay_us(100);
      000009 90 00 64         [24]  425 	mov	dptr,#0x0064
      00000C 12r00rEC         [24]  426 	lcall	_Delay_us
                                    427 ;	lcd1602.c:13: LCD_EN=0;
                                    428 ;	assignBit
      00000F C2 A7            [12]  429 	clr	_P2_7
                                    430 ;	lcd1602.c:14: Wait_For_LCD(); //Doi cho LCD san sang
      000011 12r00r17         [24]  431 	lcall	_Wait_For_LCD
                                    432 ;	lcd1602.c:15: LCD_EN=1;
                                    433 ;	assignBit
      000014 D2 A7            [12]  434 	setb	_P2_7
                                    435 ;	lcd1602.c:16: }
      000016 22               [24]  436 	ret
                                    437 ;------------------------------------------------------------
                                    438 ;Allocation info for local variables in function 'Wait_For_LCD'
                                    439 ;------------------------------------------------------------
                                    440 ;	lcd1602.c:18: void Wait_For_LCD()
                                    441 ;	-----------------------------------------
                                    442 ;	 function Wait_For_LCD
                                    443 ;	-----------------------------------------
      000017                        444 _Wait_For_LCD:
                                    445 ;	lcd1602.c:20: Delay_us(100);
      000017 90 00 64         [24]  446 	mov	dptr,#0x0064
                                    447 ;	lcd1602.c:21: }
      00001A 02r00rEC         [24]  448 	ljmp	_Delay_us
                                    449 ;------------------------------------------------------------
                                    450 ;Allocation info for local variables in function 'LCD_init'
                                    451 ;------------------------------------------------------------
                                    452 ;	lcd1602.c:22: void LCD_init()
                                    453 ;	-----------------------------------------
                                    454 ;	 function LCD_init
                                    455 ;	-----------------------------------------
      00001D                        456 _LCD_init:
                                    457 ;	lcd1602.c:24: LCD_Send_Command(0x38); //Chon che do 8 bit, 2 hang cho LCD
      00001D 75 82 38         [24]  458 	mov	dpl,#0x38
      000020 12r00r00         [24]  459 	lcall	_LCD_Send_Command
                                    460 ;	lcd1602.c:25: LCD_Send_Command(0x0E); //Bat hien thi, nhap nhay con tro
      000023 75 82 0E         [24]  461 	mov	dpl,#0x0e
      000026 12r00r00         [24]  462 	lcall	_LCD_Send_Command
                                    463 ;	lcd1602.c:26: LCD_Send_Command(0x01); //Xoa man hinh
      000029 75 82 01         [24]  464 	mov	dpl,#0x01
      00002C 12r00r00         [24]  465 	lcall	_LCD_Send_Command
                                    466 ;	lcd1602.c:27: LCD_Send_Command(0x80); //Ve dau dong
      00002F 75 82 80         [24]  467 	mov	dpl,#0x80
                                    468 ;	lcd1602.c:28: }
      000032 02r00r00         [24]  469 	ljmp	_LCD_Send_Command
                                    470 ;------------------------------------------------------------
                                    471 ;Allocation info for local variables in function 'LCD_Write_One_Char'
                                    472 ;------------------------------------------------------------
                                    473 ;c                         Allocated to registers 
                                    474 ;------------------------------------------------------------
                                    475 ;	lcd1602.c:31: void LCD_Write_One_Char(unsigned char c)
                                    476 ;	-----------------------------------------
                                    477 ;	 function LCD_Write_One_Char
                                    478 ;	-----------------------------------------
      000035                        479 _LCD_Write_One_Char:
      000035 85 82 80         [24]  480 	mov	_P0,dpl
                                    481 ;	lcd1602.c:34: LCD_RS=1; //Chon thanh ghi du lieu
                                    482 ;	assignBit
      000038 D2 A6            [12]  483 	setb	_P2_6
                                    484 ;	lcd1602.c:35: LCD_RW=0;
                                    485 ;	assignBit
      00003A C2 A5            [12]  486 	clr	_P2_5
                                    487 ;	lcd1602.c:36: LCD_EN=1;
                                    488 ;	assignBit
      00003C D2 A7            [12]  489 	setb	_P2_7
                                    490 ;	lcd1602.c:37: Delay_us(10);
      00003E 90 00 0A         [24]  491 	mov	dptr,#0x000a
      000041 12r00rEC         [24]  492 	lcall	_Delay_us
                                    493 ;	lcd1602.c:38: LCD_EN=0;
                                    494 ;	assignBit
      000044 C2 A7            [12]  495 	clr	_P2_7
                                    496 ;	lcd1602.c:39: Wait_For_LCD();
      000046 12r00r17         [24]  497 	lcall	_Wait_For_LCD
                                    498 ;	lcd1602.c:40: LCD_EN=1;
                                    499 ;	assignBit
      000049 D2 A7            [12]  500 	setb	_P2_7
                                    501 ;	lcd1602.c:41: }
      00004B 22               [24]  502 	ret
                                    503 ;------------------------------------------------------------
                                    504 ;Allocation info for local variables in function 'LCD_Write_String'
                                    505 ;------------------------------------------------------------
                                    506 ;s                         Allocated to registers r5 r6 r7 
                                    507 ;length                    Allocated to registers 
                                    508 ;------------------------------------------------------------
                                    509 ;	lcd1602.c:43: void LCD_Write_String(unsigned char *s)
                                    510 ;	-----------------------------------------
                                    511 ;	 function LCD_Write_String
                                    512 ;	-----------------------------------------
      00004C                        513 _LCD_Write_String:
                                    514 ;	lcd1602.c:46: length=strlen(s); //Lay do dai xau
      00004C AD 82            [24]  515 	mov	r5,dpl
      00004E AE 83            [24]  516 	mov	r6,dph
      000050 AF F0            [24]  517 	mov	r7,b
      000052 C0 07            [24]  518 	push	ar7
      000054 C0 06            [24]  519 	push	ar6
      000056 C0 05            [24]  520 	push	ar5
      000058 12r00r00         [24]  521 	lcall	_strlen
      00005B AB 82            [24]  522 	mov	r3,dpl
      00005D AC 83            [24]  523 	mov	r4,dph
      00005F D0 05            [24]  524 	pop	ar5
      000061 D0 06            [24]  525 	pop	ar6
      000063 D0 07            [24]  526 	pop	ar7
                                    527 ;	lcd1602.c:47: while(length!=0)
      000065                        528 00101$:
      000065 EB               [12]  529 	mov	a,r3
      000066 60 27            [24]  530 	jz	00104$
                                    531 ;	lcd1602.c:49: LCD_Write_One_Char(*s); //Ghi ra LCD gia tri duoc tro boi con tro
      000068 8D 82            [24]  532 	mov	dpl,r5
      00006A 8E 83            [24]  533 	mov	dph,r6
      00006C 8F F0            [24]  534 	mov	b,r7
      00006E 12r00r00         [24]  535 	lcall	__gptrget
      000071 FC               [12]  536 	mov	r4,a
      000072 A3               [24]  537 	inc	dptr
      000073 AD 82            [24]  538 	mov	r5,dpl
      000075 AE 83            [24]  539 	mov	r6,dph
      000077 8C 82            [24]  540 	mov	dpl,r4
      000079 C0 07            [24]  541 	push	ar7
      00007B C0 06            [24]  542 	push	ar6
      00007D C0 05            [24]  543 	push	ar5
      00007F C0 03            [24]  544 	push	ar3
      000081 12r00r35         [24]  545 	lcall	_LCD_Write_One_Char
      000084 D0 03            [24]  546 	pop	ar3
      000086 D0 05            [24]  547 	pop	ar5
      000088 D0 06            [24]  548 	pop	ar6
      00008A D0 07            [24]  549 	pop	ar7
                                    550 ;	lcd1602.c:50: s++; //Tang con tro
                                    551 ;	lcd1602.c:51: length--;
      00008C 1B               [12]  552 	dec	r3
      00008D 80 D6            [24]  553 	sjmp	00101$
      00008F                        554 00104$:
                                    555 ;	lcd1602.c:53: }
      00008F 22               [24]  556 	ret
                                    557 ;------------------------------------------------------------
                                    558 ;Allocation info for local variables in function 'LCD_GotoXY'
                                    559 ;------------------------------------------------------------
                                    560 ;col                       Allocated with name '_LCD_GotoXY_PARM_2'
                                    561 ;row                       Allocated to registers r7 
                                    562 ;i                         Allocated to registers r7 
                                    563 ;------------------------------------------------------------
                                    564 ;	lcd1602.c:55: void LCD_GotoXY(char row, char col)
                                    565 ;	-----------------------------------------
                                    566 ;	 function LCD_GotoXY
                                    567 ;	-----------------------------------------
      000090                        568 _LCD_GotoXY:
      000090 AF 82            [24]  569 	mov	r7,dpl
                                    570 ;	lcd1602.c:58: if (row == 2)
      000092 BF 02 08         [24]  571 	cjne	r7,#0x02,00102$
                                    572 ;	lcd1602.c:59: LCD_Send_Command(0xC0);      //cursor to fist col in row 2
      000095 75 82 C0         [24]  573 	mov	dpl,#0xc0
      000098 12r00r00         [24]  574 	lcall	_LCD_Send_Command
      00009B 80 06            [24]  575 	sjmp	00112$
      00009D                        576 00102$:
                                    577 ;	lcd1602.c:61: LCD_Send_Command(0x80);      //cursor to fist col in row 1 (default)
      00009D 75 82 80         [24]  578 	mov	dpl,#0x80
      0000A0 12r00r00         [24]  579 	lcall	_LCD_Send_Command
                                    580 ;	lcd1602.c:62: for (i = 0; i < col; i++)
      0000A3                        581 00112$:
      0000A3 7F 00            [12]  582 	mov	r7,#0x00
      0000A5                        583 00106$:
      0000A5 C3               [12]  584 	clr	c
      0000A6 EF               [12]  585 	mov	a,r7
      0000A7 95*00            [12]  586 	subb	a,_LCD_GotoXY_PARM_2
      0000A9 50 0D            [24]  587 	jnc	00108$
                                    588 ;	lcd1602.c:63: LCD_Send_Command(0x14);      //cursor to fist col in row 1 (default)
      0000AB 75 82 14         [24]  589 	mov	dpl,#0x14
      0000AE C0 07            [24]  590 	push	ar7
      0000B0 12r00r00         [24]  591 	lcall	_LCD_Send_Command
      0000B3 D0 07            [24]  592 	pop	ar7
                                    593 ;	lcd1602.c:62: for (i = 0; i < col; i++)
      0000B5 0F               [12]  594 	inc	r7
      0000B6 80 ED            [24]  595 	sjmp	00106$
      0000B8                        596 00108$:
                                    597 ;	lcd1602.c:64: }
      0000B8 22               [24]  598 	ret
                                    599 ;------------------------------------------------------------
                                    600 ;Allocation info for local variables in function 'Delay_ms'
                                    601 ;------------------------------------------------------------
                                    602 ;interval                  Allocated to registers r6 r7 
                                    603 ;i                         Allocated to registers r4 r5 
                                    604 ;j                         Allocated to registers r2 r3 
                                    605 ;------------------------------------------------------------
                                    606 ;	lcd1602.c:66: void Delay_ms(int interval)
                                    607 ;	-----------------------------------------
                                    608 ;	 function Delay_ms
                                    609 ;	-----------------------------------------
      0000B9                        610 _Delay_ms:
      0000B9 AE 82            [24]  611 	mov	r6,dpl
      0000BB AF 83            [24]  612 	mov	r7,dph
                                    613 ;	lcd1602.c:69: for(i=0;i<1000;i++)
      0000BD 7C 00            [12]  614 	mov	r4,#0x00
      0000BF 7D 00            [12]  615 	mov	r5,#0x00
                                    616 ;	lcd1602.c:71: for(j=0;j<interval;j++);
      0000C1                        617 00111$:
      0000C1 7A 00            [12]  618 	mov	r2,#0x00
      0000C3 7B 00            [12]  619 	mov	r3,#0x00
      0000C5                        620 00104$:
      0000C5 C3               [12]  621 	clr	c
      0000C6 EA               [12]  622 	mov	a,r2
      0000C7 9E               [12]  623 	subb	a,r6
      0000C8 EB               [12]  624 	mov	a,r3
      0000C9 64 80            [12]  625 	xrl	a,#0x80
      0000CB 8F F0            [24]  626 	mov	b,r7
      0000CD 63 F0 80         [24]  627 	xrl	b,#0x80
      0000D0 95 F0            [12]  628 	subb	a,b
      0000D2 50 07            [24]  629 	jnc	00107$
      0000D4 0A               [12]  630 	inc	r2
      0000D5 BA 00 ED         [24]  631 	cjne	r2,#0x00,00104$
      0000D8 0B               [12]  632 	inc	r3
      0000D9 80 EA            [24]  633 	sjmp	00104$
      0000DB                        634 00107$:
                                    635 ;	lcd1602.c:69: for(i=0;i<1000;i++)
      0000DB 0C               [12]  636 	inc	r4
      0000DC BC 00 01         [24]  637 	cjne	r4,#0x00,00126$
      0000DF 0D               [12]  638 	inc	r5
      0000E0                        639 00126$:
      0000E0 C3               [12]  640 	clr	c
      0000E1 EC               [12]  641 	mov	a,r4
      0000E2 94 E8            [12]  642 	subb	a,#0xe8
      0000E4 ED               [12]  643 	mov	a,r5
      0000E5 64 80            [12]  644 	xrl	a,#0x80
      0000E7 94 83            [12]  645 	subb	a,#0x83
      0000E9 40 D6            [24]  646 	jc	00111$
                                    647 ;	lcd1602.c:73: }
      0000EB 22               [24]  648 	ret
                                    649 ;------------------------------------------------------------
                                    650 ;Allocation info for local variables in function 'Delay_us'
                                    651 ;------------------------------------------------------------
                                    652 ;interval                  Allocated to registers r6 r7 
                                    653 ;j                         Allocated to registers r4 r5 
                                    654 ;------------------------------------------------------------
                                    655 ;	lcd1602.c:75: void Delay_us(int interval)
                                    656 ;	-----------------------------------------
                                    657 ;	 function Delay_us
                                    658 ;	-----------------------------------------
      0000EC                        659 _Delay_us:
      0000EC AE 82            [24]  660 	mov	r6,dpl
      0000EE AF 83            [24]  661 	mov	r7,dph
                                    662 ;	lcd1602.c:78: for(j=0;j<interval;j++);
      0000F0 7C 00            [12]  663 	mov	r4,#0x00
      0000F2 7D 00            [12]  664 	mov	r5,#0x00
      0000F4                        665 00103$:
      0000F4 C3               [12]  666 	clr	c
      0000F5 EC               [12]  667 	mov	a,r4
      0000F6 9E               [12]  668 	subb	a,r6
      0000F7 ED               [12]  669 	mov	a,r5
      0000F8 64 80            [12]  670 	xrl	a,#0x80
      0000FA 8F F0            [24]  671 	mov	b,r7
      0000FC 63 F0 80         [24]  672 	xrl	b,#0x80
      0000FF 95 F0            [12]  673 	subb	a,b
      000101 50 07            [24]  674 	jnc	00105$
      000103 0C               [12]  675 	inc	r4
      000104 BC 00 ED         [24]  676 	cjne	r4,#0x00,00103$
      000107 0D               [12]  677 	inc	r5
      000108 80 EA            [24]  678 	sjmp	00103$
      00010A                        679 00105$:
                                    680 ;	lcd1602.c:79: }
      00010A 22               [24]  681 	ret
                                    682 ;------------------------------------------------------------
                                    683 ;Allocation info for local variables in function 'keyscan'
                                    684 ;------------------------------------------------------------
                                    685 ;	main.c:8: void keyscan()
                                    686 ;	-----------------------------------------
                                    687 ;	 function keyscan
                                    688 ;	-----------------------------------------
      00010B                        689 _keyscan:
                                    690 ;	main.c:10: keypressed=0;
      00010B E4               [12]  691 	clr	a
      00010C F5*14            [12]  692 	mov	_keypressed,a
      00010E F5*15            [12]  693 	mov	(_keypressed + 1),a
                                    694 ;	main.c:11: P1=0xfe;
                                    695 ;	main.c:12: if(P1!=0xfe){
      000110 74 FE            [12]  696 	mov	a,#0xfe
      000112 F5 90            [12]  697 	mov	_P1,a
      000114 B5 90 02         [24]  698 	cjne	a,_P1,00279$
      000117 80 5E            [24]  699 	sjmp	00112$
      000119                        700 00279$:
                                    701 ;	main.c:13: Delay_us(1000);
      000119 90 03 E8         [24]  702 	mov	dptr,#0x03e8
      00011C 12r00rEC         [24]  703 	lcall	_Delay_us
                                    704 ;	main.c:14: if(P1!=0xfe){
      00011F 74 FE            [12]  705 	mov	a,#0xfe
      000121 B5 90 02         [24]  706 	cjne	a,_P1,00280$
      000124 80 46            [24]  707 	sjmp	00108$
      000126                        708 00280$:
                                    709 ;	main.c:15: num=1;
      000126 75*01 01         [24]  710 	mov	_num,#0x01
      000129 75*02 00         [24]  711 	mov	(_num + 1),#0x00
                                    712 ;	main.c:16: key=P1&0xf0;
      00012C E5 90            [12]  713 	mov	a,_P1
      00012E 54 F0            [12]  714 	anl	a,#0xf0
      000130 F5*16            [12]  715 	mov	_key,a
                                    716 ;	main.c:17: switch(key){
      000132 74 70            [12]  717 	mov	a,#0x70
      000134 B5*16 02         [24]  718 	cjne	a,_key,00281$
      000137 80 15            [24]  719 	sjmp	00101$
      000139                        720 00281$:
      000139 74 B0            [12]  721 	mov	a,#0xb0
      00013B B5*16 02         [24]  722 	cjne	a,_key,00282$
      00013E 80 16            [24]  723 	sjmp	00102$
      000140                        724 00282$:
      000140 74 D0            [12]  725 	mov	a,#0xd0
      000142 B5*16 02         [24]  726 	cjne	a,_key,00283$
      000145 80 17            [24]  727 	sjmp	00103$
      000147                        728 00283$:
      000147 74 E0            [12]  729 	mov	a,#0xe0
                                    730 ;	main.c:18: case 0x70:
      000149 B5*16 20         [24]  731 	cjne	a,_key,00108$
      00014C 80 18            [24]  732 	sjmp	00104$
      00014E                        733 00101$:
                                    734 ;	main.c:19: num+=3;
      00014E 75*01 04         [24]  735 	mov	_num,#0x04
      000151 75*02 00         [24]  736 	mov	(_num + 1),#0x00
                                    737 ;	main.c:20: break;
                                    738 ;	main.c:21: case 0xb0:
      000154 80 16            [24]  739 	sjmp	00108$
      000156                        740 00102$:
                                    741 ;	main.c:22: num+=2;
      000156 75*01 03         [24]  742 	mov	_num,#0x03
      000159 75*02 00         [24]  743 	mov	(_num + 1),#0x00
                                    744 ;	main.c:23: break;
                                    745 ;	main.c:24: case 0xd0:
      00015C 80 0E            [24]  746 	sjmp	00108$
      00015E                        747 00103$:
                                    748 ;	main.c:25: num+=1;
      00015E 75*01 02         [24]  749 	mov	_num,#0x02
      000161 75*02 00         [24]  750 	mov	(_num + 1),#0x00
                                    751 ;	main.c:26: break;
                                    752 ;	main.c:27: case 0xe0:
      000164 80 06            [24]  753 	sjmp	00108$
      000166                        754 00104$:
                                    755 ;	main.c:28: num+=0;
      000166 75*01 01         [24]  756 	mov	_num,#0x01
      000169 75*02 00         [24]  757 	mov	(_num + 1),#0x00
                                    758 ;	main.c:33: while(P1!=0xfe);
      00016C                        759 00108$:
      00016C 74 FE            [12]  760 	mov	a,#0xfe
      00016E B5 90 FB         [24]  761 	cjne	a,_P1,00108$
                                    762 ;	main.c:34: keypressed = 1;
      000171 75*14 01         [24]  763 	mov	_keypressed,#0x01
      000174 75*15 00         [24]  764 	mov	(_keypressed + 1),#0x00
      000177                        765 00112$:
                                    766 ;	main.c:36: P1=0xfd;
                                    767 ;	main.c:37: if(P1!=0xfd){
      000177 74 FD            [12]  768 	mov	a,#0xfd
      000179 F5 90            [12]  769 	mov	_P1,a
      00017B B5 90 02         [24]  770 	cjne	a,_P1,00287$
      00017E 80 5E            [24]  771 	sjmp	00124$
      000180                        772 00287$:
                                    773 ;	main.c:38: Delay_us(1000);
      000180 90 03 E8         [24]  774 	mov	dptr,#0x03e8
      000183 12r00rEC         [24]  775 	lcall	_Delay_us
                                    776 ;	main.c:39: if(P1!=0xfd){
      000186 74 FD            [12]  777 	mov	a,#0xfd
      000188 B5 90 02         [24]  778 	cjne	a,_P1,00288$
      00018B 80 46            [24]  779 	sjmp	00120$
      00018D                        780 00288$:
                                    781 ;	main.c:40: num=5;
      00018D 75*01 05         [24]  782 	mov	_num,#0x05
      000190 75*02 00         [24]  783 	mov	(_num + 1),#0x00
                                    784 ;	main.c:41: key=P1&0xf0;
      000193 E5 90            [12]  785 	mov	a,_P1
      000195 54 F0            [12]  786 	anl	a,#0xf0
      000197 F5*16            [12]  787 	mov	_key,a
                                    788 ;	main.c:42: switch(key){
      000199 74 70            [12]  789 	mov	a,#0x70
      00019B B5*16 02         [24]  790 	cjne	a,_key,00289$
      00019E 80 15            [24]  791 	sjmp	00113$
      0001A0                        792 00289$:
      0001A0 74 B0            [12]  793 	mov	a,#0xb0
      0001A2 B5*16 02         [24]  794 	cjne	a,_key,00290$
      0001A5 80 16            [24]  795 	sjmp	00114$
      0001A7                        796 00290$:
      0001A7 74 D0            [12]  797 	mov	a,#0xd0
      0001A9 B5*16 02         [24]  798 	cjne	a,_key,00291$
      0001AC 80 17            [24]  799 	sjmp	00115$
      0001AE                        800 00291$:
      0001AE 74 E0            [12]  801 	mov	a,#0xe0
                                    802 ;	main.c:43: case 0x70:
      0001B0 B5*16 20         [24]  803 	cjne	a,_key,00120$
      0001B3 80 18            [24]  804 	sjmp	00116$
      0001B5                        805 00113$:
                                    806 ;	main.c:44: num+=3;
      0001B5 75*01 08         [24]  807 	mov	_num,#0x08
      0001B8 75*02 00         [24]  808 	mov	(_num + 1),#0x00
                                    809 ;	main.c:45: break;
                                    810 ;	main.c:46: case 0xb0:
      0001BB 80 16            [24]  811 	sjmp	00120$
      0001BD                        812 00114$:
                                    813 ;	main.c:47: num+=2;
      0001BD 75*01 07         [24]  814 	mov	_num,#0x07
      0001C0 75*02 00         [24]  815 	mov	(_num + 1),#0x00
                                    816 ;	main.c:48: break;
                                    817 ;	main.c:49: case 0xd0:
      0001C3 80 0E            [24]  818 	sjmp	00120$
      0001C5                        819 00115$:
                                    820 ;	main.c:50: num+=1;
      0001C5 75*01 06         [24]  821 	mov	_num,#0x06
      0001C8 75*02 00         [24]  822 	mov	(_num + 1),#0x00
                                    823 ;	main.c:51: break;
                                    824 ;	main.c:52: case 0xe0:
      0001CB 80 06            [24]  825 	sjmp	00120$
      0001CD                        826 00116$:
                                    827 ;	main.c:53: num+=0;
      0001CD 75*01 05         [24]  828 	mov	_num,#0x05
      0001D0 75*02 00         [24]  829 	mov	(_num + 1),#0x00
                                    830 ;	main.c:58: while(P1!=0xfe);
      0001D3                        831 00120$:
      0001D3 74 FE            [12]  832 	mov	a,#0xfe
      0001D5 B5 90 FB         [24]  833 	cjne	a,_P1,00120$
                                    834 ;	main.c:59: keypressed = 1;
      0001D8 75*14 01         [24]  835 	mov	_keypressed,#0x01
      0001DB 75*15 00         [24]  836 	mov	(_keypressed + 1),#0x00
      0001DE                        837 00124$:
                                    838 ;	main.c:61: P1=0xfb;
                                    839 ;	main.c:62: if(P1!=0xfb){
      0001DE 74 FB            [12]  840 	mov	a,#0xfb
      0001E0 F5 90            [12]  841 	mov	_P1,a
      0001E2 B5 90 02         [24]  842 	cjne	a,_P1,00295$
      0001E5 80 5E            [24]  843 	sjmp	00136$
      0001E7                        844 00295$:
                                    845 ;	main.c:63: Delay_us(1000);
      0001E7 90 03 E8         [24]  846 	mov	dptr,#0x03e8
      0001EA 12r00rEC         [24]  847 	lcall	_Delay_us
                                    848 ;	main.c:64: if(P1!=0xfb){
      0001ED 74 FB            [12]  849 	mov	a,#0xfb
      0001EF B5 90 02         [24]  850 	cjne	a,_P1,00296$
      0001F2 80 46            [24]  851 	sjmp	00132$
      0001F4                        852 00296$:
                                    853 ;	main.c:65: num=9;
      0001F4 75*01 09         [24]  854 	mov	_num,#0x09
      0001F7 75*02 00         [24]  855 	mov	(_num + 1),#0x00
                                    856 ;	main.c:66: key=P1&0xf0;
      0001FA E5 90            [12]  857 	mov	a,_P1
      0001FC 54 F0            [12]  858 	anl	a,#0xf0
      0001FE F5*16            [12]  859 	mov	_key,a
                                    860 ;	main.c:67: switch(key){
      000200 74 70            [12]  861 	mov	a,#0x70
      000202 B5*16 02         [24]  862 	cjne	a,_key,00297$
      000205 80 15            [24]  863 	sjmp	00125$
      000207                        864 00297$:
      000207 74 B0            [12]  865 	mov	a,#0xb0
      000209 B5*16 02         [24]  866 	cjne	a,_key,00298$
      00020C 80 16            [24]  867 	sjmp	00126$
      00020E                        868 00298$:
      00020E 74 D0            [12]  869 	mov	a,#0xd0
      000210 B5*16 02         [24]  870 	cjne	a,_key,00299$
      000213 80 17            [24]  871 	sjmp	00127$
      000215                        872 00299$:
      000215 74 E0            [12]  873 	mov	a,#0xe0
                                    874 ;	main.c:68: case 0x70:
      000217 B5*16 20         [24]  875 	cjne	a,_key,00132$
      00021A 80 18            [24]  876 	sjmp	00128$
      00021C                        877 00125$:
                                    878 ;	main.c:69: num+=3;
      00021C 75*01 0C         [24]  879 	mov	_num,#0x0c
      00021F 75*02 00         [24]  880 	mov	(_num + 1),#0x00
                                    881 ;	main.c:70: break;
                                    882 ;	main.c:71: case 0xb0:
      000222 80 16            [24]  883 	sjmp	00132$
      000224                        884 00126$:
                                    885 ;	main.c:72: num+=2;
      000224 75*01 0B         [24]  886 	mov	_num,#0x0b
      000227 75*02 00         [24]  887 	mov	(_num + 1),#0x00
                                    888 ;	main.c:73: break;
                                    889 ;	main.c:74: case 0xd0:
      00022A 80 0E            [24]  890 	sjmp	00132$
      00022C                        891 00127$:
                                    892 ;	main.c:75: num+=1;
      00022C 75*01 0A         [24]  893 	mov	_num,#0x0a
      00022F 75*02 00         [24]  894 	mov	(_num + 1),#0x00
                                    895 ;	main.c:76: break;
                                    896 ;	main.c:77: case 0xe0:
      000232 80 06            [24]  897 	sjmp	00132$
      000234                        898 00128$:
                                    899 ;	main.c:78: num+=0;
      000234 75*01 09         [24]  900 	mov	_num,#0x09
      000237 75*02 00         [24]  901 	mov	(_num + 1),#0x00
                                    902 ;	main.c:83: while(P1!=0xfe);
      00023A                        903 00132$:
      00023A 74 FE            [12]  904 	mov	a,#0xfe
      00023C B5 90 FB         [24]  905 	cjne	a,_P1,00132$
                                    906 ;	main.c:84: keypressed = 1;
      00023F 75*14 01         [24]  907 	mov	_keypressed,#0x01
      000242 75*15 00         [24]  908 	mov	(_keypressed + 1),#0x00
      000245                        909 00136$:
                                    910 ;	main.c:86: P1=0xf7;
                                    911 ;	main.c:87: if(P1!=0xf7){
      000245 74 F7            [12]  912 	mov	a,#0xf7
      000247 F5 90            [12]  913 	mov	_P1,a
      000249 B5 90 01         [24]  914 	cjne	a,_P1,00303$
      00024C 22               [24]  915 	ret
      00024D                        916 00303$:
                                    917 ;	main.c:88: Delay_us(1000);
      00024D 90 03 E8         [24]  918 	mov	dptr,#0x03e8
      000250 12r00rEC         [24]  919 	lcall	_Delay_us
                                    920 ;	main.c:89: if(P1!=0xf7){
      000253 74 F7            [12]  921 	mov	a,#0xf7
      000255 B5 90 02         [24]  922 	cjne	a,_P1,00304$
      000258 80 46            [24]  923 	sjmp	00144$
      00025A                        924 00304$:
                                    925 ;	main.c:90: num=13;
      00025A 75*01 0D         [24]  926 	mov	_num,#0x0d
      00025D 75*02 00         [24]  927 	mov	(_num + 1),#0x00
                                    928 ;	main.c:91: key=P1&0xf0;
      000260 E5 90            [12]  929 	mov	a,_P1
      000262 54 F0            [12]  930 	anl	a,#0xf0
      000264 F5*16            [12]  931 	mov	_key,a
                                    932 ;	main.c:92: switch(key){
      000266 74 70            [12]  933 	mov	a,#0x70
      000268 B5*16 02         [24]  934 	cjne	a,_key,00305$
      00026B 80 15            [24]  935 	sjmp	00137$
      00026D                        936 00305$:
      00026D 74 B0            [12]  937 	mov	a,#0xb0
      00026F B5*16 02         [24]  938 	cjne	a,_key,00306$
      000272 80 16            [24]  939 	sjmp	00138$
      000274                        940 00306$:
      000274 74 D0            [12]  941 	mov	a,#0xd0
      000276 B5*16 02         [24]  942 	cjne	a,_key,00307$
      000279 80 17            [24]  943 	sjmp	00139$
      00027B                        944 00307$:
      00027B 74 E0            [12]  945 	mov	a,#0xe0
                                    946 ;	main.c:93: case 0x70:
      00027D B5*16 20         [24]  947 	cjne	a,_key,00144$
      000280 80 18            [24]  948 	sjmp	00140$
      000282                        949 00137$:
                                    950 ;	main.c:94: num+=3;
      000282 75*01 10         [24]  951 	mov	_num,#0x10
      000285 75*02 00         [24]  952 	mov	(_num + 1),#0x00
                                    953 ;	main.c:95: break;
                                    954 ;	main.c:96: case 0xb0:
      000288 80 16            [24]  955 	sjmp	00144$
      00028A                        956 00138$:
                                    957 ;	main.c:97: num+=2;
      00028A 75*01 0F         [24]  958 	mov	_num,#0x0f
      00028D 75*02 00         [24]  959 	mov	(_num + 1),#0x00
                                    960 ;	main.c:98: break;
                                    961 ;	main.c:99: case 0xd0:
      000290 80 0E            [24]  962 	sjmp	00144$
      000292                        963 00139$:
                                    964 ;	main.c:100: num+=1;
      000292 75*01 0E         [24]  965 	mov	_num,#0x0e
      000295 75*02 00         [24]  966 	mov	(_num + 1),#0x00
                                    967 ;	main.c:101: break;
                                    968 ;	main.c:102: case 0xe0:
      000298 80 06            [24]  969 	sjmp	00144$
      00029A                        970 00140$:
                                    971 ;	main.c:103: num+=0;
      00029A 75*01 0D         [24]  972 	mov	_num,#0x0d
      00029D 75*02 00         [24]  973 	mov	(_num + 1),#0x00
                                    974 ;	main.c:108: while(P1!=0xfe);
      0002A0                        975 00144$:
      0002A0 74 FE            [12]  976 	mov	a,#0xfe
      0002A2 B5 90 FB         [24]  977 	cjne	a,_P1,00144$
                                    978 ;	main.c:109: keypressed = 1;
      0002A5 75*14 01         [24]  979 	mov	_keypressed,#0x01
      0002A8 75*15 00         [24]  980 	mov	(_keypressed + 1),#0x00
                                    981 ;	main.c:112: }
      0002AB 22               [24]  982 	ret
                                    983 ;------------------------------------------------------------
                                    984 ;Allocation info for local variables in function 'main'
                                    985 ;------------------------------------------------------------
                                    986 ;	main.c:114: void main()
                                    987 ;	-----------------------------------------
                                    988 ;	 function main
                                    989 ;	-----------------------------------------
      0002AC                        990 _main:
                                    991 ;	main.c:116: LCD_init();
      0002AC 12r00r1D         [24]  992 	lcall	_LCD_init
                                    993 ;	main.c:117: while(1)
      0002AF                        994 00104$:
                                    995 ;	main.c:119: keyscan();
      0002AF 12r01r0B         [24]  996 	lcall	_keyscan
                                    997 ;	main.c:120: if (keypressed)
      0002B2 E5*14            [12]  998 	mov	a,_keypressed
      0002B4 45*15            [12]  999 	orl	a,(_keypressed + 1)
      0002B6 60 F7            [24] 1000 	jz	00104$
                                   1001 ;	main.c:122: keypressed = 0;
      0002B8 E4               [12] 1002 	clr	a
      0002B9 F5*14            [12] 1003 	mov	_keypressed,a
      0002BB F5*15            [12] 1004 	mov	(_keypressed + 1),a
                                   1005 ;	main.c:123: LCD_Write_One_Char(num_to_hex[num]);
      0002BD E5*01            [12] 1006 	mov	a,_num
      0002BF 24r03            [12] 1007 	add	a,#_num_to_hex
      0002C1 F9               [12] 1008 	mov	r1,a
      0002C2 87 82            [24] 1009 	mov	dpl,@r1
      0002C4 12r00r35         [24] 1010 	lcall	_LCD_Write_One_Char
                                   1011 ;	main.c:126: }
      0002C7 80 E6            [24] 1012 	sjmp	00104$
                                   1013 	.area CSEG    (CODE)
                                   1014 	.area CONST   (CODE)
                                   1015 	.area XINIT   (CODE)
                                   1016 	.area CABS    (ABS,CODE)
