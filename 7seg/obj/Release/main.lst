                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mask
                                     12 	.globl _main
                                     13 	.globl _init
                                     14 	.globl _display_number
                                     15 	.globl _EXT1_Process
                                     16 	.globl _EXT0_Process
                                     17 	.globl _TMR0_Process
                                     18 	.globl _output_7seg_off
                                     19 	.globl _output_7seg
                                     20 	.globl _delay
                                     21 	.globl _TF2
                                     22 	.globl _EXF2
                                     23 	.globl _RCLK
                                     24 	.globl _TCLK
                                     25 	.globl _EXEN2
                                     26 	.globl _TR2
                                     27 	.globl _C_T2
                                     28 	.globl _CP_RL2
                                     29 	.globl _T2CON_7
                                     30 	.globl _T2CON_6
                                     31 	.globl _T2CON_5
                                     32 	.globl _T2CON_4
                                     33 	.globl _T2CON_3
                                     34 	.globl _T2CON_2
                                     35 	.globl _T2CON_1
                                     36 	.globl _T2CON_0
                                     37 	.globl _PT2
                                     38 	.globl _ET2
                                     39 	.globl _CY
                                     40 	.globl _AC
                                     41 	.globl _F0
                                     42 	.globl _RS1
                                     43 	.globl _RS0
                                     44 	.globl _OV
                                     45 	.globl _F1
                                     46 	.globl _P
                                     47 	.globl _PS
                                     48 	.globl _PT1
                                     49 	.globl _PX1
                                     50 	.globl _PT0
                                     51 	.globl _PX0
                                     52 	.globl _RD
                                     53 	.globl _WR
                                     54 	.globl _T1
                                     55 	.globl _T0
                                     56 	.globl _INT1
                                     57 	.globl _INT0
                                     58 	.globl _TXD
                                     59 	.globl _RXD
                                     60 	.globl _P3_7
                                     61 	.globl _P3_6
                                     62 	.globl _P3_5
                                     63 	.globl _P3_4
                                     64 	.globl _P3_3
                                     65 	.globl _P3_2
                                     66 	.globl _P3_1
                                     67 	.globl _P3_0
                                     68 	.globl _EA
                                     69 	.globl _ES
                                     70 	.globl _ET1
                                     71 	.globl _EX1
                                     72 	.globl _ET0
                                     73 	.globl _EX0
                                     74 	.globl _P2_7
                                     75 	.globl _P2_6
                                     76 	.globl _P2_5
                                     77 	.globl _P2_4
                                     78 	.globl _P2_3
                                     79 	.globl _P2_2
                                     80 	.globl _P2_1
                                     81 	.globl _P2_0
                                     82 	.globl _SM0
                                     83 	.globl _SM1
                                     84 	.globl _SM2
                                     85 	.globl _REN
                                     86 	.globl _TB8
                                     87 	.globl _RB8
                                     88 	.globl _TI
                                     89 	.globl _RI
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _TH2
                                    115 	.globl _TL2
                                    116 	.globl _RCAP2H
                                    117 	.globl _RCAP2L
                                    118 	.globl _T2CON
                                    119 	.globl _B
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 	.globl _count
                                    141 ;--------------------------------------------------------
                                    142 ; special function registers
                                    143 ;--------------------------------------------------------
                                    144 	.area RSEG    (ABS,DATA)
      000000                        145 	.org 0x0000
                           000080   146 _P0	=	0x0080
                           000081   147 _SP	=	0x0081
                           000082   148 _DPL	=	0x0082
                           000083   149 _DPH	=	0x0083
                           000087   150 _PCON	=	0x0087
                           000088   151 _TCON	=	0x0088
                           000089   152 _TMOD	=	0x0089
                           00008A   153 _TL0	=	0x008a
                           00008B   154 _TL1	=	0x008b
                           00008C   155 _TH0	=	0x008c
                           00008D   156 _TH1	=	0x008d
                           000090   157 _P1	=	0x0090
                           000098   158 _SCON	=	0x0098
                           000099   159 _SBUF	=	0x0099
                           0000A0   160 _P2	=	0x00a0
                           0000A8   161 _IE	=	0x00a8
                           0000B0   162 _P3	=	0x00b0
                           0000B8   163 _IP	=	0x00b8
                           0000D0   164 _PSW	=	0x00d0
                           0000E0   165 _ACC	=	0x00e0
                           0000F0   166 _B	=	0x00f0
                           0000C8   167 _T2CON	=	0x00c8
                           0000CA   168 _RCAP2L	=	0x00ca
                           0000CB   169 _RCAP2H	=	0x00cb
                           0000CC   170 _TL2	=	0x00cc
                           0000CD   171 _TH2	=	0x00cd
                                    172 ;--------------------------------------------------------
                                    173 ; special function bits
                                    174 ;--------------------------------------------------------
                                    175 	.area RSEG    (ABS,DATA)
      000000                        176 	.org 0x0000
                           000080   177 _P0_0	=	0x0080
                           000081   178 _P0_1	=	0x0081
                           000082   179 _P0_2	=	0x0082
                           000083   180 _P0_3	=	0x0083
                           000084   181 _P0_4	=	0x0084
                           000085   182 _P0_5	=	0x0085
                           000086   183 _P0_6	=	0x0086
                           000087   184 _P0_7	=	0x0087
                           000088   185 _IT0	=	0x0088
                           000089   186 _IE0	=	0x0089
                           00008A   187 _IT1	=	0x008a
                           00008B   188 _IE1	=	0x008b
                           00008C   189 _TR0	=	0x008c
                           00008D   190 _TF0	=	0x008d
                           00008E   191 _TR1	=	0x008e
                           00008F   192 _TF1	=	0x008f
                           000090   193 _P1_0	=	0x0090
                           000091   194 _P1_1	=	0x0091
                           000092   195 _P1_2	=	0x0092
                           000093   196 _P1_3	=	0x0093
                           000094   197 _P1_4	=	0x0094
                           000095   198 _P1_5	=	0x0095
                           000096   199 _P1_6	=	0x0096
                           000097   200 _P1_7	=	0x0097
                           000098   201 _RI	=	0x0098
                           000099   202 _TI	=	0x0099
                           00009A   203 _RB8	=	0x009a
                           00009B   204 _TB8	=	0x009b
                           00009C   205 _REN	=	0x009c
                           00009D   206 _SM2	=	0x009d
                           00009E   207 _SM1	=	0x009e
                           00009F   208 _SM0	=	0x009f
                           0000A0   209 _P2_0	=	0x00a0
                           0000A1   210 _P2_1	=	0x00a1
                           0000A2   211 _P2_2	=	0x00a2
                           0000A3   212 _P2_3	=	0x00a3
                           0000A4   213 _P2_4	=	0x00a4
                           0000A5   214 _P2_5	=	0x00a5
                           0000A6   215 _P2_6	=	0x00a6
                           0000A7   216 _P2_7	=	0x00a7
                           0000A8   217 _EX0	=	0x00a8
                           0000A9   218 _ET0	=	0x00a9
                           0000AA   219 _EX1	=	0x00aa
                           0000AB   220 _ET1	=	0x00ab
                           0000AC   221 _ES	=	0x00ac
                           0000AF   222 _EA	=	0x00af
                           0000B0   223 _P3_0	=	0x00b0
                           0000B1   224 _P3_1	=	0x00b1
                           0000B2   225 _P3_2	=	0x00b2
                           0000B3   226 _P3_3	=	0x00b3
                           0000B4   227 _P3_4	=	0x00b4
                           0000B5   228 _P3_5	=	0x00b5
                           0000B6   229 _P3_6	=	0x00b6
                           0000B7   230 _P3_7	=	0x00b7
                           0000B0   231 _RXD	=	0x00b0
                           0000B1   232 _TXD	=	0x00b1
                           0000B2   233 _INT0	=	0x00b2
                           0000B3   234 _INT1	=	0x00b3
                           0000B4   235 _T0	=	0x00b4
                           0000B5   236 _T1	=	0x00b5
                           0000B6   237 _WR	=	0x00b6
                           0000B7   238 _RD	=	0x00b7
                           0000B8   239 _PX0	=	0x00b8
                           0000B9   240 _PT0	=	0x00b9
                           0000BA   241 _PX1	=	0x00ba
                           0000BB   242 _PT1	=	0x00bb
                           0000BC   243 _PS	=	0x00bc
                           0000D0   244 _P	=	0x00d0
                           0000D1   245 _F1	=	0x00d1
                           0000D2   246 _OV	=	0x00d2
                           0000D3   247 _RS0	=	0x00d3
                           0000D4   248 _RS1	=	0x00d4
                           0000D5   249 _F0	=	0x00d5
                           0000D6   250 _AC	=	0x00d6
                           0000D7   251 _CY	=	0x00d7
                           0000AD   252 _ET2	=	0x00ad
                           0000BD   253 _PT2	=	0x00bd
                           0000C8   254 _T2CON_0	=	0x00c8
                           0000C9   255 _T2CON_1	=	0x00c9
                           0000CA   256 _T2CON_2	=	0x00ca
                           0000CB   257 _T2CON_3	=	0x00cb
                           0000CC   258 _T2CON_4	=	0x00cc
                           0000CD   259 _T2CON_5	=	0x00cd
                           0000CE   260 _T2CON_6	=	0x00ce
                           0000CF   261 _T2CON_7	=	0x00cf
                           0000C8   262 _CP_RL2	=	0x00c8
                           0000C9   263 _C_T2	=	0x00c9
                           0000CA   264 _TR2	=	0x00ca
                           0000CB   265 _EXEN2	=	0x00cb
                           0000CC   266 _TCLK	=	0x00cc
                           0000CD   267 _RCLK	=	0x00cd
                           0000CE   268 _EXF2	=	0x00ce
                           0000CF   269 _TF2	=	0x00cf
                                    270 ;--------------------------------------------------------
                                    271 ; overlayable register banks
                                    272 ;--------------------------------------------------------
                                    273 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        274 	.ds 8
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable bit register bank
                                    277 ;--------------------------------------------------------
                                    278 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        279 bits:
      000000                        280 	.ds 1
                           008000   281 	b0 = bits[0]
                           008100   282 	b1 = bits[1]
                           008200   283 	b2 = bits[2]
                           008300   284 	b3 = bits[3]
                           008400   285 	b4 = bits[4]
                           008500   286 	b5 = bits[5]
                           008600   287 	b6 = bits[6]
                           008700   288 	b7 = bits[7]
                                    289 ;--------------------------------------------------------
                                    290 ; internal ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area DSEG    (DATA)
      000000                        293 _count::
      000000                        294 	.ds 1
                                    295 ;--------------------------------------------------------
                                    296 ; overlayable items in internal ram
                                    297 ;--------------------------------------------------------
                                    298 	.area	OSEG    (OVR,DATA)
                                    299 	.area	OSEG    (OVR,DATA)
                                    300 ;--------------------------------------------------------
                                    301 ; Stack segment in internal ram
                                    302 ;--------------------------------------------------------
                                    303 	.area	SSEG
      000000                        304 __start__stack:
      000000                        305 	.ds	1
                                    306 
                                    307 ;--------------------------------------------------------
                                    308 ; indirectly addressable internal ram data
                                    309 ;--------------------------------------------------------
                                    310 	.area ISEG    (DATA)
                                    311 ;--------------------------------------------------------
                                    312 ; absolute internal ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area IABS    (ABS,DATA)
                                    315 	.area IABS    (ABS,DATA)
                                    316 ;--------------------------------------------------------
                                    317 ; bit data
                                    318 ;--------------------------------------------------------
                                    319 	.area BSEG    (BIT)
                                    320 ;--------------------------------------------------------
                                    321 ; paged external ram data
                                    322 ;--------------------------------------------------------
                                    323 	.area PSEG    (PAG,XDATA)
                                    324 ;--------------------------------------------------------
                                    325 ; external ram data
                                    326 ;--------------------------------------------------------
                                    327 	.area XSEG    (XDATA)
                                    328 ;--------------------------------------------------------
                                    329 ; absolute external ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area XABS    (ABS,XDATA)
                                    332 ;--------------------------------------------------------
                                    333 ; external initialized ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area XISEG   (XDATA)
                                    336 	.area HOME    (CODE)
                                    337 	.area GSINIT0 (CODE)
                                    338 	.area GSINIT1 (CODE)
                                    339 	.area GSINIT2 (CODE)
                                    340 	.area GSINIT3 (CODE)
                                    341 	.area GSINIT4 (CODE)
                                    342 	.area GSINIT5 (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 	.area GSFINAL (CODE)
                                    345 	.area CSEG    (CODE)
                                    346 ;--------------------------------------------------------
                                    347 ; interrupt vector
                                    348 ;--------------------------------------------------------
                                    349 	.area HOME    (CODE)
      000000                        350 __interrupt_vect:
      000000 02r00r00         [24]  351 	ljmp	__sdcc_gsinit_startup
      000003 02r00r53         [24]  352 	ljmp	_EXT0_Process
      000006                        353 	.ds	5
      00000B 02r00r46         [24]  354 	ljmp	_TMR0_Process
      00000E                        355 	.ds	5
      000013 02r00r9B         [24]  356 	ljmp	_EXT1_Process
                                    357 ;--------------------------------------------------------
                                    358 ; global & static initialisations
                                    359 ;--------------------------------------------------------
                                    360 	.area HOME    (CODE)
                                    361 	.area GSINIT  (CODE)
                                    362 	.area GSFINAL (CODE)
                                    363 	.area GSINIT  (CODE)
                                    364 	.globl __sdcc_gsinit_startup
                                    365 	.globl __sdcc_program_startup
                                    366 	.globl __start__stack
                                    367 	.globl __mcs51_genXINIT
                                    368 	.globl __mcs51_genXRAMCLEAR
                                    369 	.globl __mcs51_genRAMCLEAR
                                    370 ;	main.c:15: unsigned char count=0;
      000000 75*00 00         [24]  371 	mov	_count,#0x00
                                    372 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  373 	ljmp	__sdcc_program_startup
                                    374 ;--------------------------------------------------------
                                    375 ; Home
                                    376 ;--------------------------------------------------------
                                    377 	.area HOME    (CODE)
                                    378 	.area HOME    (CODE)
      000016                        379 __sdcc_program_startup:
      000016 02r01r70         [24]  380 	ljmp	_main
                                    381 ;	return from main will return to caller
                                    382 ;--------------------------------------------------------
                                    383 ; code
                                    384 ;--------------------------------------------------------
                                    385 	.area CSEG    (CODE)
                                    386 ;------------------------------------------------------------
                                    387 ;Allocation info for local variables in function 'delay'
                                    388 ;------------------------------------------------------------
                                    389 ;interval                  Allocated to registers r6 r7 
                                    390 ;i                         Allocated to registers r4 r5 
                                    391 ;j                         Allocated to registers r2 r3 
                                    392 ;------------------------------------------------------------
                                    393 ;	main.c:21: void delay(int interval)
                                    394 ;	-----------------------------------------
                                    395 ;	 function delay
                                    396 ;	-----------------------------------------
      000000                        397 _delay:
                           000007   398 	ar7 = 0x07
                           000006   399 	ar6 = 0x06
                           000005   400 	ar5 = 0x05
                           000004   401 	ar4 = 0x04
                           000003   402 	ar3 = 0x03
                           000002   403 	ar2 = 0x02
                           000001   404 	ar1 = 0x01
                           000000   405 	ar0 = 0x00
      000000 AE 82            [24]  406 	mov	r6,dpl
      000002 AF 83            [24]  407 	mov	r7,dph
                                    408 ;	main.c:24: for(i=0;i<100;i++)
      000004 7C 00            [12]  409 	mov	r4,#0x00
      000006 7D 00            [12]  410 	mov	r5,#0x00
                                    411 ;	main.c:26: for(j=0;j<interval;j++);
      000008                        412 00111$:
      000008 7A 00            [12]  413 	mov	r2,#0x00
      00000A 7B 00            [12]  414 	mov	r3,#0x00
      00000C                        415 00104$:
      00000C C3               [12]  416 	clr	c
      00000D EA               [12]  417 	mov	a,r2
      00000E 9E               [12]  418 	subb	a,r6
      00000F EB               [12]  419 	mov	a,r3
      000010 64 80            [12]  420 	xrl	a,#0x80
      000012 8F F0            [24]  421 	mov	b,r7
      000014 63 F0 80         [24]  422 	xrl	b,#0x80
      000017 95 F0            [12]  423 	subb	a,b
      000019 50 07            [24]  424 	jnc	00107$
      00001B 0A               [12]  425 	inc	r2
      00001C BA 00 ED         [24]  426 	cjne	r2,#0x00,00104$
      00001F 0B               [12]  427 	inc	r3
      000020 80 EA            [24]  428 	sjmp	00104$
      000022                        429 00107$:
                                    430 ;	main.c:24: for(i=0;i<100;i++)
      000022 0C               [12]  431 	inc	r4
      000023 BC 00 01         [24]  432 	cjne	r4,#0x00,00126$
      000026 0D               [12]  433 	inc	r5
      000027                        434 00126$:
      000027 C3               [12]  435 	clr	c
      000028 EC               [12]  436 	mov	a,r4
      000029 94 64            [12]  437 	subb	a,#0x64
      00002B ED               [12]  438 	mov	a,r5
      00002C 64 80            [12]  439 	xrl	a,#0x80
      00002E 94 80            [12]  440 	subb	a,#0x80
      000030 40 D6            [24]  441 	jc	00111$
                                    442 ;	main.c:28: }
      000032 22               [24]  443 	ret
                                    444 ;------------------------------------------------------------
                                    445 ;Allocation info for local variables in function 'output_7seg'
                                    446 ;------------------------------------------------------------
                                    447 ;value                     Allocated to registers r7 
                                    448 ;------------------------------------------------------------
                                    449 ;	main.c:30: void output_7seg(unsigned char value)
                                    450 ;	-----------------------------------------
                                    451 ;	 function output_7seg
                                    452 ;	-----------------------------------------
      000033                        453 _output_7seg:
      000033 AF 82            [24]  454 	mov	r7,dpl
                                    455 ;	main.c:32: if (value < 10)
      000035 BF 0A 00         [24]  456 	cjne	r7,#0x0a,00109$
      000038                        457 00109$:
      000038 50 07            [24]  458 	jnc	00103$
                                    459 ;	main.c:33: LED7SEG_DATA = mask[value];
      00003A EF               [12]  460 	mov	a,r7
      00003B 90r00r00         [24]  461 	mov	dptr,#_mask
      00003E 93               [24]  462 	movc	a,@a+dptr
      00003F F5 80            [12]  463 	mov	_P0,a
      000041                        464 00103$:
                                    465 ;	main.c:34: }
      000041 22               [24]  466 	ret
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'output_7seg_off'
                                    469 ;------------------------------------------------------------
                                    470 ;	main.c:35: void output_7seg_off()
                                    471 ;	-----------------------------------------
                                    472 ;	 function output_7seg_off
                                    473 ;	-----------------------------------------
      000042                        474 _output_7seg_off:
                                    475 ;	main.c:37: LED7SEG_DATA = 0x00;
      000042 75 80 00         [24]  476 	mov	_P0,#0x00
                                    477 ;	main.c:38: }
      000045 22               [24]  478 	ret
                                    479 ;------------------------------------------------------------
                                    480 ;Allocation info for local variables in function 'TMR0_Process'
                                    481 ;------------------------------------------------------------
                                    482 ;	main.c:43: void TMR0_Process() __interrupt TF0_VECTOR{
                                    483 ;	-----------------------------------------
                                    484 ;	 function TMR0_Process
                                    485 ;	-----------------------------------------
      000046                        486 _TMR0_Process:
                                    487 ;	main.c:44: TF0  = 0;             //clear flag
                                    488 ;	assignBit
      000046 C2 8D            [12]  489 	clr	_TF0
                                    490 ;	main.c:45: TR0  = 0;             //stop timer
                                    491 ;	assignBit
      000048 C2 8C            [12]  492 	clr	_TR0
                                    493 ;	main.c:46: TH0  = TH0_50ms;    //reset T0 value
      00004A 75 8C 4C         [24]  494 	mov	_TH0,#0x4c
                                    495 ;	main.c:47: TL0  = TL0_50ms;    //
      00004D 75 8A 00         [24]  496 	mov	_TL0,#0x00
                                    497 ;	main.c:51: TR0  = 1;             //restart timer
                                    498 ;	assignBit
      000050 D2 8C            [12]  499 	setb	_TR0
                                    500 ;	main.c:52: }
      000052 32               [24]  501 	reti
                                    502 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    503 ;	eliminated unneeded push/pop not_psw
                                    504 ;	eliminated unneeded push/pop dpl
                                    505 ;	eliminated unneeded push/pop dph
                                    506 ;	eliminated unneeded push/pop b
                                    507 ;	eliminated unneeded push/pop acc
                                    508 ;------------------------------------------------------------
                                    509 ;Allocation info for local variables in function 'EXT0_Process'
                                    510 ;------------------------------------------------------------
                                    511 ;	main.c:57: void EXT0_Process() __interrupt IE0_VECTOR{
                                    512 ;	-----------------------------------------
                                    513 ;	 function EXT0_Process
                                    514 ;	-----------------------------------------
      000053                        515 _EXT0_Process:
      000053 C0*00            [24]  516 	push	bits
      000055 C0 E0            [24]  517 	push	acc
      000057 C0 F0            [24]  518 	push	b
      000059 C0 82            [24]  519 	push	dpl
      00005B C0 83            [24]  520 	push	dph
      00005D C0 07            [24]  521 	push	(0+7)
      00005F C0 06            [24]  522 	push	(0+6)
      000061 C0 05            [24]  523 	push	(0+5)
      000063 C0 04            [24]  524 	push	(0+4)
      000065 C0 03            [24]  525 	push	(0+3)
      000067 C0 02            [24]  526 	push	(0+2)
      000069 C0 01            [24]  527 	push	(0+1)
      00006B C0 00            [24]  528 	push	(0+0)
      00006D C0 D0            [24]  529 	push	psw
      00006F 75 D0 00         [24]  530 	mov	psw,#0x00
                                    531 ;	main.c:58: EA=0;    //Cam ngat
                                    532 ;	assignBit
      000072 C2 AF            [12]  533 	clr	_EA
                                    534 ;	main.c:59: delay(2);
      000074 90 00 02         [24]  535 	mov	dptr,#0x0002
      000077 12r00r00         [24]  536 	lcall	_delay
                                    537 ;	main.c:60: count++;
      00007A 05*00            [12]  538 	inc	_count
                                    539 ;	main.c:61: EA=1;    //Cho phep ngat
                                    540 ;	assignBit
      00007C D2 AF            [12]  541 	setb	_EA
                                    542 ;	main.c:62: }
      00007E D0 D0            [24]  543 	pop	psw
      000080 D0 00            [24]  544 	pop	(0+0)
      000082 D0 01            [24]  545 	pop	(0+1)
      000084 D0 02            [24]  546 	pop	(0+2)
      000086 D0 03            [24]  547 	pop	(0+3)
      000088 D0 04            [24]  548 	pop	(0+4)
      00008A D0 05            [24]  549 	pop	(0+5)
      00008C D0 06            [24]  550 	pop	(0+6)
      00008E D0 07            [24]  551 	pop	(0+7)
      000090 D0 83            [24]  552 	pop	dph
      000092 D0 82            [24]  553 	pop	dpl
      000094 D0 F0            [24]  554 	pop	b
      000096 D0 E0            [24]  555 	pop	acc
      000098 D0*00            [24]  556 	pop	bits
      00009A 32               [24]  557 	reti
                                    558 ;------------------------------------------------------------
                                    559 ;Allocation info for local variables in function 'EXT1_Process'
                                    560 ;------------------------------------------------------------
                                    561 ;	main.c:67: void EXT1_Process() __interrupt IE1_VECTOR{
                                    562 ;	-----------------------------------------
                                    563 ;	 function EXT1_Process
                                    564 ;	-----------------------------------------
      00009B                        565 _EXT1_Process:
      00009B C0*00            [24]  566 	push	bits
      00009D C0 E0            [24]  567 	push	acc
      00009F C0 F0            [24]  568 	push	b
      0000A1 C0 82            [24]  569 	push	dpl
      0000A3 C0 83            [24]  570 	push	dph
      0000A5 C0 07            [24]  571 	push	(0+7)
      0000A7 C0 06            [24]  572 	push	(0+6)
      0000A9 C0 05            [24]  573 	push	(0+5)
      0000AB C0 04            [24]  574 	push	(0+4)
      0000AD C0 03            [24]  575 	push	(0+3)
      0000AF C0 02            [24]  576 	push	(0+2)
      0000B1 C0 01            [24]  577 	push	(0+1)
      0000B3 C0 00            [24]  578 	push	(0+0)
      0000B5 C0 D0            [24]  579 	push	psw
      0000B7 75 D0 00         [24]  580 	mov	psw,#0x00
                                    581 ;	main.c:68: EA=0;    //Cam ngat
                                    582 ;	assignBit
      0000BA C2 AF            [12]  583 	clr	_EA
                                    584 ;	main.c:69: delay(2);
      0000BC 90 00 02         [24]  585 	mov	dptr,#0x0002
      0000BF 12r00r00         [24]  586 	lcall	_delay
                                    587 ;	main.c:70: count--;
      0000C2 15*00            [12]  588 	dec	_count
                                    589 ;	main.c:71: EA=1;    //Cho phep ngat
                                    590 ;	assignBit
      0000C4 D2 AF            [12]  591 	setb	_EA
                                    592 ;	main.c:72: }
      0000C6 D0 D0            [24]  593 	pop	psw
      0000C8 D0 00            [24]  594 	pop	(0+0)
      0000CA D0 01            [24]  595 	pop	(0+1)
      0000CC D0 02            [24]  596 	pop	(0+2)
      0000CE D0 03            [24]  597 	pop	(0+3)
      0000D0 D0 04            [24]  598 	pop	(0+4)
      0000D2 D0 05            [24]  599 	pop	(0+5)
      0000D4 D0 06            [24]  600 	pop	(0+6)
      0000D6 D0 07            [24]  601 	pop	(0+7)
      0000D8 D0 83            [24]  602 	pop	dph
      0000DA D0 82            [24]  603 	pop	dpl
      0000DC D0 F0            [24]  604 	pop	b
      0000DE D0 E0            [24]  605 	pop	acc
      0000E0 D0*00            [24]  606 	pop	bits
      0000E2 32               [24]  607 	reti
                                    608 ;------------------------------------------------------------
                                    609 ;Allocation info for local variables in function 'display_number'
                                    610 ;------------------------------------------------------------
                                    611 ;iNum                      Allocated to registers r7 
                                    612 ;i                         Allocated to registers r6 
                                    613 ;temp                      Allocated to registers r2 
                                    614 ;------------------------------------------------------------
                                    615 ;	main.c:77: void display_number(unsigned char iNum){
                                    616 ;	-----------------------------------------
                                    617 ;	 function display_number
                                    618 ;	-----------------------------------------
      0000E3                        619 _display_number:
      0000E3 AF 82            [24]  620 	mov	r7,dpl
                                    621 ;	main.c:80: for(i=0; i<3; i++){
      0000E5 7E 00            [12]  622 	mov	r6,#0x00
      0000E7                        623 00102$:
                                    624 ;	main.c:81: temp = iNum % 10;
      0000E7 8F 04            [24]  625 	mov	ar4,r7
      0000E9 7D 00            [12]  626 	mov	r5,#0x00
      0000EB 75*00 0A         [24]  627 	mov	__modsint_PARM_2,#0x0a
                                    628 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0000EE 8D*01            [24]  629 	mov	(__modsint_PARM_2 + 1),r5
      0000F0 8C 82            [24]  630 	mov	dpl,r4
      0000F2 8D 83            [24]  631 	mov	dph,r5
      0000F4 C0 06            [24]  632 	push	ar6
      0000F6 C0 05            [24]  633 	push	ar5
      0000F8 C0 04            [24]  634 	push	ar4
      0000FA 12r00r00         [24]  635 	lcall	__modsint
      0000FD AA 82            [24]  636 	mov	r2,dpl
      0000FF D0 04            [24]  637 	pop	ar4
      000101 D0 05            [24]  638 	pop	ar5
                                    639 ;	main.c:82: iNum = iNum / 10;
      000103 75*00 0A         [24]  640 	mov	__divsint_PARM_2,#0x0a
      000106 75*01 00         [24]  641 	mov	(__divsint_PARM_2 + 1),#0x00
      000109 8C 82            [24]  642 	mov	dpl,r4
      00010B 8D 83            [24]  643 	mov	dph,r5
      00010D C0 02            [24]  644 	push	ar2
      00010F 12r00r00         [24]  645 	lcall	__divsint
      000112 AC 82            [24]  646 	mov	r4,dpl
      000114 D0 02            [24]  647 	pop	ar2
      000116 D0 06            [24]  648 	pop	ar6
      000118 8C 07            [24]  649 	mov	ar7,r4
                                    650 ;	main.c:86: LED7SEG_ADDR0 = i & 0x01;
      00011A EE               [12]  651 	mov	a,r6
      00011B 54 01            [12]  652 	anl	a,#0x01
                                    653 ;	assignBit
      00011D 24 FF            [12]  654 	add	a,#0xff
      00011F 92 A2            [24]  655 	mov	_P2_2,c
                                    656 ;	main.c:87: LED7SEG_ADDR1 = i & 0x02;
      000121 EE               [12]  657 	mov	a,r6
      000122 03               [12]  658 	rr	a
      000123 54 01            [12]  659 	anl	a,#0x01
                                    660 ;	assignBit
      000125 24 FF            [12]  661 	add	a,#0xff
      000127 92 A3            [24]  662 	mov	_P2_3,c
                                    663 ;	main.c:88: LED7SEG_ADDR2 = i & 0x04;
      000129 EE               [12]  664 	mov	a,r6
      00012A 03               [12]  665 	rr	a
      00012B 03               [12]  666 	rr	a
      00012C 54 01            [12]  667 	anl	a,#0x01
                                    668 ;	assignBit
      00012E 24 FF            [12]  669 	add	a,#0xff
      000130 92 A4            [24]  670 	mov	_P2_4,c
                                    671 ;	main.c:89: output_7seg(temp);
      000132 8A 82            [24]  672 	mov	dpl,r2
      000134 C0 07            [24]  673 	push	ar7
      000136 C0 06            [24]  674 	push	ar6
      000138 12r00r33         [24]  675 	lcall	_output_7seg
                                    676 ;	main.c:90: delay(1);
      00013B 90 00 01         [24]  677 	mov	dptr,#0x0001
      00013E 12r00r00         [24]  678 	lcall	_delay
                                    679 ;	main.c:91: output_7seg_off();
      000141 12r00r42         [24]  680 	lcall	_output_7seg_off
      000144 D0 06            [24]  681 	pop	ar6
      000146 D0 07            [24]  682 	pop	ar7
                                    683 ;	main.c:80: for(i=0; i<3; i++){
      000148 0E               [12]  684 	inc	r6
      000149 BE 03 00         [24]  685 	cjne	r6,#0x03,00111$
      00014C                        686 00111$:
      00014C 40 99            [24]  687 	jc	00102$
                                    688 ;	main.c:93: }
      00014E 22               [24]  689 	ret
                                    690 ;------------------------------------------------------------
                                    691 ;Allocation info for local variables in function 'init'
                                    692 ;------------------------------------------------------------
                                    693 ;	main.c:95: void init(){
                                    694 ;	-----------------------------------------
                                    695 ;	 function init
                                    696 ;	-----------------------------------------
      00014F                        697 _init:
                                    698 ;	main.c:96: P3_2 = 1;             //Thiet lap chan P3_2 lam chan vao
                                    699 ;	assignBit
      00014F D2 B2            [12]  700 	setb	_P3_2
                                    701 ;	main.c:97: P3_3 = 1;             //Thiet lap chan P3_3 lam chan vao
                                    702 ;	assignBit
      000151 D2 B3            [12]  703 	setb	_P3_3
                                    704 ;	main.c:99: EX0  = 1;             //Cho phep ngat ngoai 0
                                    705 ;	assignBit
      000153 D2 A8            [12]  706 	setb	_EX0
                                    707 ;	main.c:100: IT0  = 1;            //Ngat theo suon
                                    708 ;	assignBit
      000155 D2 88            [12]  709 	setb	_IT0
                                    710 ;	main.c:102: EX1  = 1;             //Cho phep ngat ngoai 1
                                    711 ;	assignBit
      000157 D2 AA            [12]  712 	setb	_EX1
                                    713 ;	main.c:103: IT1  = 1;            //Ngat theo suon
                                    714 ;	assignBit
      000159 D2 8A            [12]  715 	setb	_IT1
                                    716 ;	main.c:104: EA   = 1;            //global interrupt enable
                                    717 ;	assignBit
      00015B D2 AF            [12]  718 	setb	_EA
                                    719 ;	main.c:109: TMOD = TMOD & 0xF0;
      00015D 53 89 F0         [24]  720 	anl	_TMOD,#0xf0
                                    721 ;	main.c:110: TMOD = TMOD | 0x01;
      000160 43 89 01         [24]  722 	orl	_TMOD,#0x01
                                    723 ;	main.c:111: TH0  = TH0_50ms;    //Khoi tao T0
      000163 75 8C 4C         [24]  724 	mov	_TH0,#0x4c
                                    725 ;	main.c:112: TL0  = TL0_50ms;    //Tuong duong 15536
      000166 75 8A 00         [24]  726 	mov	_TL0,#0x00
                                    727 ;	main.c:113: TF0  = 0;             //Xoa co tran timer 0
                                    728 ;	assignBit
      000169 C2 8D            [12]  729 	clr	_TF0
                                    730 ;	main.c:114: TR0  = 1;             //Khoi dong timer 0
                                    731 ;	assignBit
      00016B D2 8C            [12]  732 	setb	_TR0
                                    733 ;	main.c:115: ET0  = 1;            //cho phep ngat timer 0
                                    734 ;	assignBit
      00016D D2 A9            [12]  735 	setb	_ET0
                                    736 ;	main.c:116: }
      00016F 22               [24]  737 	ret
                                    738 ;------------------------------------------------------------
                                    739 ;Allocation info for local variables in function 'main'
                                    740 ;------------------------------------------------------------
                                    741 ;	main.c:120: void main(){
                                    742 ;	-----------------------------------------
                                    743 ;	 function main
                                    744 ;	-----------------------------------------
      000170                        745 _main:
                                    746 ;	main.c:121: init();
      000170 12r01r4F         [24]  747 	lcall	_init
                                    748 ;	main.c:122: while(1){
      000173                        749 00102$:
                                    750 ;	main.c:123: display_number(count);
      000173 85*00 82         [24]  751 	mov	dpl,_count
      000176 12r00rE3         [24]  752 	lcall	_display_number
                                    753 ;	main.c:125: }
      000179 80 F8            [24]  754 	sjmp	00102$
                                    755 	.area CSEG    (CODE)
                                    756 	.area CONST   (CODE)
      000000                        757 _mask:
      000000 3F                     758 	.db #0x3f	; 63
      000001 06                     759 	.db #0x06	; 6
      000002 5B                     760 	.db #0x5b	; 91
      000003 4F                     761 	.db #0x4f	; 79	'O'
      000004 66                     762 	.db #0x66	; 102	'f'
      000005 6D                     763 	.db #0x6d	; 109	'm'
      000006 7D                     764 	.db #0x7d	; 125
      000007 07                     765 	.db #0x07	; 7
      000008 7F                     766 	.db #0x7f	; 127
      000009 6F                     767 	.db #0x6f	; 111	'o'
                                    768 	.area XINIT   (CODE)
                                    769 	.area CABS    (ABS,CODE)
